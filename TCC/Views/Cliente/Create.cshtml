@model TCC.Models.Cliente

@{
    ViewBag.Title = "Create";
}
<link rel="stylesheet" type="text/css" href="~/CSS/form.css">
<h1 class="formTitle">Cadastro</h1>
@using (Html.BeginForm("Create", "Cliente", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.CPF)
            <section class="line"></section>
            @Html.EditorFor(model => model.CPF)
        </section>
        @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
    </div>

    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.Endereco.CEP)
            <section class="line"></section>
            @Html.EditorFor(model => model.Endereco.CEP, new { htmlAttributes = new { @class = "form-control", id = "Cep", name = "Cep" } })
        </section>
        @Html.ValidationMessageFor(model => model.Endereco.CEP, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.Endereco.Logra)
            <section class="line"></section>
            @Html.EditorFor(model => model.Endereco.Logra, new { htmlAttributes = new { @class = "form-control", id = "Logra", name = "Logra" } })
        </section>
        @Html.ValidationMessageFor(model => model.Endereco.Logra, "", new { @class = "text-danger" })
    </div>

    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.Endereco.Bairro)
            <section class="line"></section>
            @Html.EditorFor(model => model.Endereco.Bairro, new { htmlAttributes = new { @class = "form-control", id = "Bairro", name = "Bairro" } })
        </section>
        @Html.ValidationMessageFor(model => model.Endereco.Bairro, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.Endereco.Cidade)
            <section class="line"></section>
            @Html.EditorFor(model => model.Endereco.Cidade, new { htmlAttributes = new { @class = "form-control", id = "Cidade", name = "Cidade" } })
        </section>
        @Html.ValidationMessageFor(model => model.Endereco.Cidade, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.NomeCli)
            <section class="line"></section>
            @Html.EditorFor(model => model.NomeCli)
        </section>
        @Html.ValidationMessageFor(model => model.NomeCli, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.EmailCli)
            <section class="line"></section>
            @Html.EditorFor(model => model.EmailCli)
        </section>
        @Html.ValidationMessageFor(model => model.EmailCli, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.CelCli)
            <section class="line"></section>
            @Html.EditorFor(model => model.CelCli)
        </section>
        @Html.ValidationMessageFor(model => model.CelCli, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.Comp)
            <section class="line"></section>
            @Html.EditorFor(model => model.Comp)
        </section>
        @Html.ValidationMessageFor(model => model.Comp, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.NumEdif)
            <section class="line"></section>
            @Html.EditorFor(model => model.NumEdif)
        </section>
        @Html.ValidationMessageFor(model => model.NumEdif, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.User.UsuarioText)
            <section class="line"></section>
            @Html.EditorFor(model => model.User.UsuarioText)
        </section>
        @Html.ValidationMessageFor(model => model.User.UsuarioText, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.User.Senha)
            <section class="line"></section>
            @Html.EditorFor(model => model.User.Senha)
        </section>
        @Html.ValidationMessageFor(model => model.User.Senha, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(model => model.User.ConfirmaSenha)
            <section class="line"></section>
            @Html.EditorFor(model => model.User.ConfirmaSenha)
        </section>
        @Html.ValidationMessageFor(model => model.User.ConfirmaSenha, "", new { @class = "text-danger" })
    </div>
    <div class="wrapper">
        <section class="input-Data">
            @Html.LabelFor(m => m.Imagem, new { @class = "imgOptionForm" })
            <div class="col-md-10">
                <input type="file" name="ImageUpload" required />
            </div>
        </section>
    </div>
    <div class="bottomForm">
        <section class="bottomFormBottom">
            <button type="submit" id="submit">Cadstrar-se</button>
        </section>
    </div>
}
@Html.Raw(TempData["msg"])
<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.10/jquery.mask.js"></script>
    <script src="~/Scripts/Myscript.js"></script>

    <script>
        //const input = document.getElementById('Imagem')
        //input.addEventListener('change', () => {
        //    let binaryData = "";
        //    function readBlob() {
        //        var files = input.files;
        //        if (!files.length) {
        //            alert('Please select a file!');
        //            return;
        //        }
        //        var file = files[0];
        //        var reader = new FileReader();
        //        var blob = file.slice(0, file.size);
        //        reader.readAsDataURL(blob);
        //        reader.onloadend = function (evt) {
        //            if (evt.target.readyState == FileReader.DONE) {
        //                binaryData = evt.target.result;
        //                console.log(binaryData);
        //            }
        //        };
        //    }
        //});
        //async function requestSender(method, url, data, info) {
        //    await activeLoader(info.Loader);
        //    const request = await new Promise((resolve, reject) => {
        //        const xhr = new XMLHttpRequest();
        //        xhr.open(method, url, true);
        //        xhr.responseType = "json";
        //        if (data) if (info & !info.formRequest) {
        //            if (typeof (data) === "object") data = JSON.stringify(data);
        //            xhr.setRequestHeader("Content-Type", "application/json");
        //        }
        //        xhr.onload = () => {
        //            if (xhr.status > 400) {
        //                desactiveLoader(info.Loader);
        //                reject({ failure: "Alguma coisa deu errado!" });
        //            }
        //            resolve(xhr.response)
        //        };
        //        xhr.onerror = () => { desactiveLoader(info.Loader); reject({ failure: "Tente Novamente!" }); };
        //        xhr.send(data);
        //    });
        //    await desactiveLoader(info.Loader);
        //    return request;
        //}
        $(document).ready(function () {
            function limpa_formulário_cep() {
                // Limpa valores do formulário de cep.
                $("#Logra").val("");
                $("#Bairro").val("");
                $("#Cidade").val("");
                //$("#Uf").val("");
            }
            //Quando o campo cep perde o foco.
            $("#Cep").blur(function () {
                //Nova variável "cep" somente com dígitos.
                var cep = $(this).val().replace(/\D/g, '');
                //Verifica se campo cep possui valor informado.
                if (cep != "") {
                    //Expressão regular para validar o CEP.
                    var validacep = /^[0-9]{8}$/;
                    //Valida o formato do CEP.
                    if (validacep.test(cep)) {
                        //Preenche os campos com "..." enquanto consulta webservice.
                        $("#Logra").val("...");
                        $("#Bairro").val("...");
                        $("#Cidade").val("...");
                        //$("#Uf").val("...");
                        //Consulta o webservice viacep.com.br/
                        $.getJSON("https://viacep.com.br/ws/" + cep + "/json/?callback=?", function (dados) {
                            if (!("erro" in dados)) {
                                //Atualiza os campos com os valores da consulta.
                                $("#Logra").val(dados.logradouro);
                                $("#Bairro").val(dados.bairro);
                                $("#Cidade").val(dados.localidade);
                                //$("#UF").val(dados.uf);
                            } //end if.
                            else {
                                //CEP pesquisado não foi encontrado.
                                limpa_formulário_cep();
                                alert("CEP não encontrado.");
                            }
                        });
                    } //end if.
                    else {
                        //cep é inválido.
                        limpa_formulário_cep();
                        alert("Formato de CEP inválido.");
                    }
                } //end if.
                else {
                    //cep sem valor, limpa formulário.
                    limpa_formulário_cep();
                }
            });
        });
    </script>
}
