@model TCC.Models.Cliente

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Cliente.cshtml";
}
<link rel="stylesheet" href="~/CSS/perfil.css">
<link rel="stylesheet" href="~/CSS/form.css">
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <section class="bigImage">
        <img src="https://cdn4.iconfinder.com/data/icons/standard-free-icons/139/Profile01-512.png" alt="foto produto">
    </section>
    <section class="formDetails">
        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.CPF)
                <section class="line"></section>
                @Html.LabelFor(model => model.CPF)
            </div>
            @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
        </div>
        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.Endereco.CEP, new { htmlAttributes = new { id = "Cep", name = "Cep" } })
                <section class="line"></section>
                @Html.LabelFor(model => model.Endereco.CEP)
            </div>
            @Html.ValidationMessageFor(model => model.Endereco.CEP, "", new { @class = "text-danger" })
        </div>

        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.Endereco.Logra, new { htmlAttributes = new { id = "Logra", name = "Logra" } })
                <section class="line"></section>
                @Html.LabelFor(model => model.Endereco.Logra)
            </div>
            @Html.ValidationMessageFor(model => model.Endereco.Logra, "", new { @class = "text-danger" })
        </div>

        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.Endereco.Bairro, new { htmlAttributes = new { id = "Bairro", name = "Bairro" } })
                <section class="line"></section>
                @Html.LabelFor(model => model.Endereco.Bairro)
            </div>
            @Html.ValidationMessageFor(model => model.Endereco.Bairro, "", new { @class = "text-danger" })
        </div>

        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.Endereco.Cidade, new { htmlAttributes = new { id = "Cidade", name = "Cidade" } })
                <section class="line"></section>
                @Html.LabelFor(model => model.Endereco.Cidade)
            </div>
            @Html.ValidationMessageFor(model => model.Endereco.Cidade, "", new { @class = "text-danger" })
        </div>

        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.NomeCli)
                <section class="line"></section>
                @Html.LabelFor(model => model.NomeCli)
            </div>
            @Html.ValidationMessageFor(model => model.NomeCli, "", new { @class = "text-danger" })
        </div>
        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.EmailCli)
                <section class="line"></section>
                @Html.LabelFor(model => model.EmailCli)
            </div>
            @Html.ValidationMessageFor(model => model.EmailCli, "", new { @class = "text-danger" })
        </div>
        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.CelCli)
                <section class="line"></section>
                @Html.LabelFor(model => model.CelCli)
            </div>
            @Html.ValidationMessageFor(model => model.CelCli, "", new { @class = "text-danger" })
        </div>
        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.Comp)
                <section class="line"></section>
                @Html.LabelFor(model => model.Comp)
            </div>
            @Html.ValidationMessageFor(model => model.Comp, "", new { @class = "text-danger" })
        </div>
        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.NumEdif)
                <section class="line"></section>
                @Html.LabelFor(model => model.NumEdif)
            </div>
            @Html.ValidationMessageFor(model => model.NumEdif, "", new { @class = "text-danger" })
        </div>
        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.User.UsuarioText)
                <section class="line"></section>
                @Html.LabelFor(model => model.User.UsuarioText)
            </div>
            @Html.ValidationMessageFor(model => model.NumEdif, "", new { @class = "text-danger" })
        </div>
        <div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.User.Senha)
                <section class="line"></section>
                @Html.LabelFor(model => model.User.Senha)
            </div>
            @Html.ValidationMessageFor(model => model.NumEdif, "", new { @class = "text-danger" })
        </div>
        @*<div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.User.ConfirmaSenha)
                <section class="line"></section>
                @Html.LabelFor(model => model.User.ConfirmaSenha)
            </div>
            @Html.ValidationMessageFor(model => model.NumEdif, "", new { @class = "text-danger" })
        </div>*@
        @*<div class="wrapper">
            <div class="input-Data">
                @Html.EditorFor(model => model.QtdPontos)
                <section class="line"></section>
                @Html.LabelFor(model => model.QtdPontos)
            </div>
            @Html.ValidationMessageFor(model => model.QtdPontos, "", new { @class = "text-danger" })
        </div>*@
        <div class="bottomForm">
            <section class="bottomFormBottom">
                <button type="submit" id="submit">Salvar</button>
            </section>
        </div>
    </section>
}
@Html.Raw(TempData["msg"])
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/Myscript.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.10/jquery.mask.js"></script>
    <script>
        $(document).ready(function () {
            function limpa_formulário_cep() {
                // Limpa valores do formulário de cep.
                $("#Logra").val("");
                $("#Bairro").val("");
                $("#Cidade").val("");
                //$("#Uf").val("");
            }
            //Quando o campo cep perde o foco.
            $("#Cep").blur(function () {
                //Nova variável "cep" somente com dígitos.
                var cep = $(this).val().replace(/\D/g, '');
                //Verifica se campo cep possui valor informado.
                if (cep != "") {
                    //Expressão regular para validar o CEP.
                    var validacep = /^[0-9]{8}$/;
                    //Valida o formato do CEP.
                    if (validacep.test(cep)) {
                        //Preenche os campos com "..." enquanto consulta webservice.
                        $("#Logra").val("...");
                        $("#Bairro").val("...");
                        $("#Cidade").val("...");
                        //$("#Uf").val("...");
                        //Consulta o webservice viacep.com.br/
                        $.getJSON("https://viacep.com.br/ws/" + cep + "/json/?callback=?", function (dados) {
                            if (!("erro" in dados)) {
                                //Atualiza os campos com os valores da consulta.
                                $("#Logra").val(dados.logradouro);
                                $("#Bairro").val(dados.bairro);
                                $("#Cidade").val(dados.localidade);
                                //$("#UF").val(dados.uf);
                            } //end if.
                            else {
                                //CEP pesquisado não foi encontrado.
                                limpa_formulário_cep();
                                alert("CEP não encontrado.");
                            }
                        });
                    } //end if.
                    else {
                        //cep é inválido.
                        limpa_formulário_cep();
                        alert("Formato de CEP inválido.");
                    }
                } //end if.
                else {
                    //cep sem valor, limpa formulário.
                    limpa_formulário_cep();
                }
            });
        });
    </script>
}
